<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="productMapper">

<!-- 상품 정보 -->
<select id="selectProd" parameterType="String" resultType="productDTO">
	SELECT 	PROD_SUBCODE, PROD_PRICE, PROD_CONTENTS, PROD_STYLE, PROD_GENDER 
	FROM 	PRODUCT_INFO 
	WHERE 	PROD_SUBCODE = #{PROD_SUBCODE}
</select>

<!-- 상품 이미지 정보 -->
<!-- 이미지가 한 폴더가 아닌 카테고리별로 분류될 경우를 대비하여 join문 사용 -->
<!-- List<String> 으로 처리해보고 이상있을시 DTO 이용 -->
<select id="selectProdImg" parameterType="String" resultType="String">
	SELECT 	A.PROD_IMG
	FROM 	PRODUCT_IMG A, product_info B
	WHERE 	A.PROD_SUBCODE = B.PROD_SUBCODE
	AND 	A.PROD_SUBCODE = #{PROD_SUBCODE}
</select>

<!-- 상품 별점/리뷰수 -->
<!-- HashMap<String, Object> 로 처리해보고 이상있을시 DTO 이용 -->
<select id="selectProdScore" resultType="hashMap">
	SELECT 	COUNT(*) AS CNT, NVL(ROUND(AVG(REVIEW_SCORE), 1), 0) AS AVG 
	FROM 	REVIEW
</select>

<!-- 상품 찜 여부 -->
<select id="selectProdHeart" resultType="String">
	SELECT PROD_CODE FROM HEART
</select>

<!-- 상품 장바구니 여부 -->
<select id="selectProdCart" resultType="String">
	SELECT PROD_CODE FROM CART
</select>

<!-- 상품 사이즈/컬러 데이터 -->
<!-- Group By Case When 이용시 쿼리박스는 문제없으나 mapper에선 에러발생하여 하위쿼리로 생성 -->
<!-- 사이즈에 대한 우선순위가 없어 정렬에서 처리 -->
<select id="selectProdChoice" parameterType="hashMap" resultType="String">
	SELECT 	A.CHOICE
	FROM	(
		SELECT 	LOWER(CASE #{PROD_INFO} WHEN 'C' THEN PROD_COLOR WHEN 'S' THEN PROD_SIZE END) AS CHOICE 
		FROM 	PRODUCT
		WHERE	PROD_SUBCODE = #{PROD_SUBCODE}
	) A
	GROUP BY A.CHOICE
	ORDER BY CASE A.CHOICE WHEN 'XS' THEN '1' WHEN 'S' THEN '2' WHEN 'M' THEN '3' 
							WHEN 'L' THEN '4' WHEN 'XL' THEN '5' WHEN 'XXL' THEN '6' ELSE A.CHOICE END
</select>

<!-- 옵션 선택시 생성되는 상품 코드 정보 -->
<select id="choiceProd" parameterType="productDTO" resultType="productDTO">
	SELECT	A.PROD_SUBCODE, A.PROD_COLOR, A.PROD_SIZE, B.PROD_PRICE	
	FROM	PRODUCT A, PRODUCT_INFO B
	WHERE	A.PROD_SUBCODE = B.PROD_SUBCODE
	AND 	A.PROD_SUBCODE = #{PROD_SUBCODE}
	AND 	A.PROD_COLOR = #{PROD_COLOR}
	AND 	A.PROD_SIZE = #{PROD_SIZE}
</select>

<!-- 옵션 선택시 생성되는 상품 코드(insert용) -->
<select id="choiceProdCode" parameterType="productDTO" resultType="String">
	SELECT 	PROD_CODE
	FROM 	PRODUCT 
	WHERE 	PROD_SUBCODE = #{PROD_SUBCODE}
	AND 	PROD_COLOR = #{PROD_COLOR}
	AND 	PROD_SIZE = #{PROD_SIZE}
</select>

<!-- 옵션 선택시 생성되는 상품 코드의 정보 -->
<!-- productDTO에 CART_QTY 컬럼 생성해야함 -->
<select id="cartProd" parameterType="String" resultType="productDTO">
	SELECT 	B.PROD_SUBCODE, B.PROD_COLOR, B.PROD_SIZE, A.CART_QTY, B.PROD_PRICE
	FROM 	CART A, 
			(
				SELECT	A.PROD_CODE, A.PROD_SUBCODE, A.PROD_COLOR, A.PROD_SIZE, B.PROD_PRICE	
				FROM	PRODUCT A, PRODUCT_INFO B
				WHERE	A.PROD_SUBCODE = B.PROD_SUBCODE
				AND 	A.PROD_CODE = #{PROD_CODE}
			) B
	WHERE 	A.PROD_CODE = B.PROD_CODE
</select>

<select id="selectBag" parameterType="hashMap" resultType="String">
	SELECT 	PROD_CODE
	FROM 	CART
	WHERE 	USER_ID = #{USER_ID}
	AND 	PROD_CODE = #{PROD_CODE}
</select>

<update id="updateBag" parameterType="hashMap">
	UPDATE 	CART
	SET		CART_QTY = CART_QTY + #{CART_QTY}
	WHERE 	USER_ID = #{USER_ID}
	AND 	PROD_CODE = #{PROD_CODE}
</update>

<insert id="insertBag" parameterType="hashMap">
	INSERT INTO CART(USER_ID, PROD_CODE, CART_QTY, CART_CREATED)
	VALUES (#{USER_ID}, #{PROD_CODE}, #{CART_QTY}, SYSDATE)
</insert>

<!-- prod_subcode에대한 전체 리뷰출력  -->
<select id="selectProductReview" parameterType="hashMap" resultType="reviewDTO">
	select * from (
	select rownum rnum, data.* from (
			select a.prod_code,a.user_id,a.review_num,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode
			from review a,product p
			where a.prod_code=p.prod_code
			and p.prod_subcode=#{prod_subcode}
			order by ${sort} desc
	 ) data) 
	<![CDATA[ 
	where rnum>=#{start} and rnum<=#{end}
	]]>
	
</select>

<!-- 고객이 쓴 리뷰의 이미지들 출력  -->
<select id="selectReviewImg" parameterType="String" resultType="String">
	select review_img from review_img
	where review_num = #{review_num}
</select>

<!-- 포토리뷰 출력  -->
<select id="selectPhotoReview" parameterType="hashMap" resultType="reviewDTO">
	select * from (
	select rownum rnum, data.* from (
			select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode, a.review_num
			from review a,review_img ri,product p
			where  a.review_num=ri.review_num
			and p.prod_code=a.prod_code
			and p.prod_subcode=#{prod_subcode}
			and ri.review_img is not null
			group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM
			order by ${sort} desc
	 ) data) 
<![CDATA[ 
	where rnum>=#{start} and rnum<=#{end}
]]>
</select>

<!-- 내 체형별 리뷰 출력  -->
<select id="selectUserFormReview" parameterType="hashMap" resultType="reviewDTO">
	select * from (
	select rownum rnum, data.* from (
			select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode, a.review_num,c.user_form
			from review a,product p,custom c
			where p.prod_code=a.prod_code
			and a.user_id=c.user_id
			and p.prod_subcode=#{prod_subcode}
			and c.user_form=#{user_form}
			group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM,c.user_form
			order by ${sort} desc
	 ) data) 
	<![CDATA[ 
	where rnum>=#{start} and rnum<=#{end}
]]>
</select>

<!-- 내 체형별 + 포토 리뷰 출력  -->
<select id="selectAllChkReview" parameterType="hashMap" resultType="reviewDTO">
	select * from (
	select rownum rnum, data.* from (
			select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode,a.review_num,c.user_form
			from review a,review_img ri,product p,custom c
			where  a.review_num=ri.review_num
			and a.user_id=c.user_id
			and p.prod_code=a.prod_code
			and p.prod_subcode=#{prod_subcode}
			and c.user_form=#{user_form}
			and ri.review_img is not null
			group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM,c.user_form
			order by ${sort} desc
	 ) data) 
	<![CDATA[ 
	where rnum>=#{start} and rnum<=#{end}
	]]>
</select>

<select id="selectCountReview" parameterType="String" resultType="int">
	select count(*) as reviewCnt 
	from review r,product p
	where r.prod_code = p.prod_code
	and p.prod_subcode=#{prod_subcode}
</select>

<select id="selectCountPhotoReview" parameterType="String" resultType="int">
	select count(*) as photoCnt 
	from 
	(select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode, a.review_num
	from review a,review_img ri,product p
	where  a.review_num=ri.review_num
	and p.prod_code=a.prod_code
	and p.prod_subcode=#{prod_subcode}
	and ri.review_img is not null
	group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM)
</select>

<select id="selectCountFormReview" parameterType="hashMap" resultType="int">
	select count(*) as formCnt 
	from 
	(select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode, a.review_num,c.user_form
	from review a,product p,custom c
	where p.prod_code=a.prod_code
	and a.user_id=c.user_id
	and p.prod_subcode=#{prod_subcode}
	and c.user_form=#{user_form}
	group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM,c.user_form)
</select>

<select id="selectCountAllChkReview" parameterType="hashMap" resultType="int">
	select count(*) as allChkCnt
	from 
	(select a.prod_code,a.user_id,a.review_contents,a.ceo_contents,a.review_score,a.review_created,p.prod_subcode,a.review_num,c.user_form
	from review a,review_img ri,product p,custom c
	where  a.review_num=ri.review_num
	and a.user_id=c.user_id
	and p.prod_code=a.prod_code
	and p.prod_subcode=#{prod_subcode}
	and c.user_form=#{user_form}
	and ri.review_img is not null
	group by a.PROD_CODE,a.USER_ID,a.REVIEW_CONTENTS,a.CEO_CONTENTS,a.REVIEW_SCORE,a.REVIEW_CREATED,p.PROD_SUBCODE,a.REVIEW_NUM,c.user_form)
</select>

<insert id="insertReport" parameterType="hashMap">
	insert into report values (#{user_id},#{review_num},sysdate)
</insert>



</mapper>